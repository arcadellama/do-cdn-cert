#!/usr/bin/env sh

# Required dependencies
DIGITALOCEAN_TOKEN="${DIGITALOCEAN_TOKEN:-}" # --do-token <PATH/TO/TOKEN>
DNS_HOOK="${DNS_HOOK:-}" # --dns-hook <dns_hook>
CURL_BIN="${CURL_BIN:-$(command -v curl)}" # --curl <PATH>
JQ_BIN="${JQ_BIN:-$(command -v jq)}" # --jq <PATH>
ACME_BIN="${ACME_BIN:-$(command -v acme.sh)}" # --acme <PATH>

# Local variables
_PRGNAM='do-cdn-cert'
_DATE="$(date +"%Y-%m-%d %H:%M:%S")"
_DO_API_URL="https://api.digitalocean.com/v2"

# Functions
log_this() {
    _bold="\033[1m"
    _red="\033[31m"
    _reset="\033[m"
    case "$1" in
        error)
            shift
            printf '%b%b[%s] ERROR:%b %s\n' \
                "$_bold" "$_red" "$_PRGNAM" "$_reset" "$@" >&2
            ;;
        *)
            printf '%b[%s]:%b %s\n' \
                "$_bold" "$_PRGNAM" "$_reset" "$@"
            ;;
    esac
}

replace_newline() {
    sed 's/$/\\n/' "$@" | tr -d '\n'
}

time_to_seconds() {
    _time=$(printf '%s' "$1" | sed 's/T/ /;s/Z//')

    # First try GNU date
    if date -d "$_time" '+%s' 2>/dev/null; then
        return
    fi

    # Try BSD date
    if date -j -f '%Y-%m-%d %H:%M:%S' "$_time" '+%s' 2>/dev/null; then
        return
    fi

    log_this error "Unable to convert time format to seconds."
    return 1
}

# Returns 1 (error) if less than 30 days left on certificate
expiry_check() {
    _cert_date=$(time_to_seconds "$1")
    _current_date=$(time_to_seconds "$_DATE")
    _one_day=$(( 24 * 60 * 60 ))
    _thirty_days=$(( _one_day * 30 ))
    _difference=$(( _cert_date - _current_date ))

    printf '%d\n' "$(( _difference / _one_day ))"

    if [ "$_difference" -le "$_thirty_days" ]; then
        return 1
    fi
}

get_do() {
    _type="$1"
    _id="$2"
    _response="$(mktemp)"
    _endpoint=""
    _ret=""

    # Find the endpoint
    case "$_type" in
        cdn) _endpoint="cdn/endpoints" ;;
        certificate) _endpoint="certificates/$_id" ;;
    esac

    # Try the curl action
    _ret="$("$CURL_BIN" \
        -s \
        -o "$_response" \
        -w '%{http_code}' \
        -X GET \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
        "$_DO_API_URL/$_endpoint")" || return 1

    # Check if successful, or return error code
    if [ "$_ret" -ne 200 ]; then
        printf '%s\n' "$_ret"
        return 1
    fi

    # Return the json from digital ocean
    printf '%s\n' "$_response"
}

create_do_cert() {
    _cert_name="$1"
    _priv_key="$(replace_newline "$2")"
    _leaf_cert="$(replace_newline "$3")"
    _cert_chain="$(replace_newline "$4")"
    _response="$(mktemp)"
    _endpoint="certificates"
    _payload=$(mktemp)
    _ret=""

    cat << EOF > "$_payload"
    {
        "name": "$_cert_name",
        "type": "custom",
        "private_key": "$_priv_key",
        "leaf_certificate": "$_leaf_cert",
        "certificate_chain": "$_cert_chain"
    }
EOF
    # Try the curl action
    _ret="$("$CURL_BIN" \
        -s \
        -o "$_response" \
        -w '%{http_code}' \
        -X POST \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
        -d @"$_payload" \
        "$_DO_API_URL/$_endpoint")" || return 1

    # Check if successful, or return error code
    if [ "$_ret" -ne 201 ]; then
        printf '%s\n' "$_ret"
        return 1
    fi

    # Return the json from digital ocean
    printf '%s\n' "$_response"
}

update_cdn_cert() {
    _cdn_id="$1"
    _cert_id="$2"
    _response="$(mktemp)"
    _endpoint="cdn/endpoints/$_cdn_id"
    _payload=$(mktemp)
    _ret=""

    cat << EOF > "$_payload"
    {
        "certificate_id": "$_cert_id"
    }
EOF
    # Try the curl action
    _ret="$("$CURL_BIN" \
        -s \
        -o "$_response" \
        -w '%{http_code}' \
        -X PUT \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
        -d @"$_payload" \
        "$_DO_API_URL/$_endpoint")" || return 1

    # Check if successful, or return error code
    if [ "$_ret" -ne 200 ]; then
        printf '%s\n' "$_ret"
        return 1
    fi
}

issue_cert() {
    _domain="$1"
    _certfile="$2"
    _keyfile="$3"
    _fullchainfile="$4"

    if ! "$ACME_BIN" --issue \
        -d "$_domain" \
        --cert-file "$_certfile" \
        --key-file "$_keyfile" \
        --fullchain-file "$_fullchainfile" \
        --dns "$DNS_HOOK" 2>&1/dev/null; then
            return 1
    fi
}

namify() {
    printf '%s\n' "$*" | tr ' ' '-' | tr '.' '-' | tr ':' '-' | tr ';' '-'
}

main() {
    # Test Global Variables
    if [ ! -x "$CURL_BIN" ]; then
    	log_this error "curl not found."
    	exit 1
    elif [ ! -x "$JQ_BIN" ]; then
    	log_this error "jq not found."
    	exit 1
    elif [ -z "$DIGITALOCEAN_TOKEN" ]; then
        log_this error "Need to specify Digital Ocean token."
        exit 1
    elif [ -z "$DNS_HOOK" ]; then
        log_this error "Need to specify a DNS hook from wiki.acme.sh."
        exit 1
    fi
   
    _cdn_list=""
    # Get list of CDN
    if ! _cdn_list=$(get_do cdn); then
        log_this error "Cannot get cdn list, error code: $_cdn_list"
        return 1
    fi

    _cdn_count=$("$JQ_BIN" -r .meta.total < "$_cdn_list")
    # LOOP THROUGH LIST OF CURRENT CDN
    while [ "$_cdn_count" -gt -1 ]; do
        _cdn_count=$(( _cdn_count - 1 ))
        _cdn_id="" _old_cert_id="" _cdn_domain="" 
        _old_cert="" _old_cert_expiry="" _old_cert_type=""
        _new_cert_name="" _new_cert_id="" _days_left=""
        _certkey=$(mktemp)
        _privkey=$(mktemp)
        _fullchain=$(mktemp)
        
        # Save the cdn_id, cdn_certificate_id, cdn_custom_domain
        _cdn_id=$("$JQ_BIN" -r \
            .endpoints["$_cdn_count"].id < "$_cdn_list")
        _old_cert_id=$("$JQ_BIN" -r \
            .endpoints["$_cdn_count"].certificate_id < "$_cdn_list")
        _cdn_domain=$("$JQ_BIN" -r \
            .endpoints["$_cdn_count"].custom_domain < "$_cdn_list")

        # Check that certificate id exists
        if [ -n "$_old_cert_id" ]; then
            if ! _old_cert=$(get_do certificate "$_old_cert_id"); then
                log_this error "Cannot get certificate, error code: $_old_cert"
                return 1
            fi
    
            _old_cert_expiry=$("$JQ_BIN" -r \
                .certificate.not_after < "$_old_cert")
            _old_cert_type=$("$JQ_BIN" -r \
                .certificate.type < "$_old_cert")
    
            # Check if a custom certificate, otherwise continue the loop
            if ! [ "$_old_cert_type" = "custom" ]; then
                continue
            fi
    
            # Check if certificate is expired, continue the loop if not
            if _days_left=$(expiry_check "$_old_cert_expiry"); then
                log_this "$_days_left days left until $_cdn_domain expires."
                log_this "Not renewing $_cdn_domain."
                continue
            fi
        fi

        log_this "$_days_left days until $_cdn_domain expires, renewing."

        # Issue a new cert
        if ! issue_cert \
            "$_cdn_domain" "$_certkey" "$_privkey" "$_fullchain"; then
            log_this error "Error issuing domain for $_cdn_domain"
        fi

        # Create a cert_name with cdn_custom_domain-date
        _new_cert_name=$(namify "$_cdn_domain" "$(time_to_seconds "$_DATE")")
        # CREATE NEW CERTIFICATE 
        if ! _new_cert=$(create_do_cert "$_new_cert_name" \
            "$_certkey" "$_privkey" "$_fullchain"); then
                log_this error "Cannot create certificate, code: $_new_cert_id"
                return 1
        fi

        _new_cert_id=$("$JSON_BIN" -r .certificate.id < "$_new_cert")
        
        # UPDATE CURRENT CDN with new certificate_id
        if ! _update_cdn=$(update_cdn_cert "$_cdn_id" "$_new_cert_id"); then
            log_this error "update_cdn_cert, code: $_update_cdn"
            return 1
        fi

        log_this "Successfully updated $_cdn_domain CDN certificate!"

        # DELETE OLD CERTIFICATE
        if ! _del_cert=$(delete_do_cert "$_old_cert_id"); then
            log_this error "Cannot delete old certificate, code: $_del_cert"
        fi

        log_this "Successfully deleted old certificate ($_old_cert_id)"

    done < "$_cdn_list"
}
main "$@"
